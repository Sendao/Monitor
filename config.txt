# Configuration HOWTO:
# 
# 1. Create a group. "group: <name>"
# 2. Configure log aggregation: "logto: <some_log_aggregate_file>"
# 3. Monitor some logfile. "logfile: <some_log_file>"
# 3a. Monitor another logfile. Each group can support multiple logfiles and processes.
# 4. Monitor a process. "process: <name>".
# 4A. Add details. "service: <servicename>" will connect to a service.
# 4B. Set the process's autostart parameter. "autostart: on"
# 4. repeat as necessary. Groups with multiple processes might be restartable at some point in the future
# 1. repeat as necessary. You can have as many groups as you need aggregating to separate logfiles.
#
# Reference
#
# Main Commands:

# gituser: <username> - Stores git username for automatic redeployment.
# gitkey: <path> - Path to file to use for authentication.
#
# group: <groupname> - Create a process logfile group.
# ... <group options>
#
# logfile: <path> - Monitor a particular logfile.
# ... <logfile options>
#
# process: <processname> - Monitor a particular process.
# ... <process options>
#
#
# Group Options:
# logto: <path> - aggregates all other logfiles to some location.
# logglykey: <key> - sets the default key/tag for all processes in this group.
# logglytag: <tag> - key is used for login, tag is used to label this group. Note logglykey and logglytag can also be used per-process.
# repo: <master URI> - repository to reload code from.
# branch: <branch name> - branch specifier if not master.
# require: <name> - requires that another group start first.
# warmup: <seconds> - sets a warmup time interval before starting dependent services.
# logarchivecmd: <cmd> - sets a command to use instead of 'rm -f' for recycling logfiles. eg 'tar -jcvf /logfiles_`format_time_now`.tar.bz2'
        logarchivecmd will be run once for each maximum number of files in the command buffer (i.e., `getconf MAX_ARG`)
# maxlogcount: <filecount> - maximum number of files before log recycling. 0 for no cycling.
# maxlogsize: <kb> - sets maximum size in kb. You can use shortcuts eg maxlogsize: 10M will set a limit of 10240kb.
: trimlogcount: <filecount> - used to determine (recycle_count=current_files-trim_files) how many files to recycle.
# trimlogsize: <kb> - sets maximum (recycle_size=current_size-trim_size) in kb.
#
# Process Options:
# noshell - runs a process without 'bash'
# logglykey: <key> - sets the key/tag for just this process. You can narrow the logging with just logglytag, or use both.
# logglytag: <tag>
# newsid - starts the new process (bash or not) in a new session
# autostart - monitor should start the service if it's not already running or can't be detected as running (eg if there is no psgrep)
# keeprunning - monitor should keep the service online
# shellpid - if the process is in a bash shell, scan its pid on startup via 'cmdline & fg'
# env: <vars> - export variables for use in the bash shell.
# cwd: <dir> - set working directory.
# runas: <user> - user to su as. Monitor must be run as root to use runas.
# psgrep: <regex> - scan for the pid. this will identify the first process as primary until it exits, which creates a logged crash.
# service: <name> - The name of a service, which overrides start/stop commands and reads service status for its checkup.
# startcmd: <runtime> - what to run to start the process
# stopcmd: <runtime> - to stop the process
#
# Sample
#
